[["index.html", "Principios de bioinform√°tica y ciencias de biodatos Presentaci√≥n", " Principios de bioinform√°tica y ciencias de biodatos Alejandro Acevedo-Aracena, PhD1; Manuel Mu√±oz-Gonz√°lez2 2021-04-13 Presentaci√≥n Los avances en la obtenci√≥n de datos biol√≥gicos asociados a genes, prote√≠nas y metabolitos han dado lugar a un r√°pido aumento del volumen y complejidad de datos publicados en distintos repositorios de libre acceso (por ejemplo Gene Expression Omnibus de NCBI). Actualmente se requiere de bioinform√°ticos que apliquen herramientas bioinform√°ticas y ciencia de datos para generar resultados biol√≥gicamente interpretables desde datos complejos y diversos. Este curso est√° orientado a alumnos sin ning√∫n conocimiento previo sobre programaci√≥n y computacional ni bioinform√°tica. Se espera que al final del curso los alumnos dominen herramientas b√°sicas de bioinform√°tica y principios generales de ciencia de datos para aplicarlos en sus respectivas √°reas de investigaci√≥n. FONDECYT Postdoctoral Fellow, Universidad de Chile, deepen.data@gmail.com‚Ü©Ô∏é Pregrado, Universidad de Chile‚Ü©Ô∏é "],["setup-del-ambiente.html", "Setup del ambiente Paquetes de CRAN Paquetes de Bioconductor Instalaci√≥n de R(Studio) en Windows", " Setup del ambiente Paquetes de CRAN CRAN (Comprehensive R Archive Network) es el repositorio principal de R, con m√°s de 16,000 paquetes disponibles en multiples ambitos de analisis de datos, ciencias (astronomia, biolog√≠a, matematica, sociolog√≠a, etc.) y econom√≠a. De aqui instalamos: options(install.packages.check.source = &quot;yes&quot;) # Chequea la fuente de los paquetes install.packages(&quot;devtools&quot;) # Utilidades de manejo de archivos, descargas, etc. install.packages(&quot;tidyverse&quot;) # Set de paquetes que hacen muchas cosas # Analisis no lineal, manipulaci√≥n de texto, etc... # Paquetes que deberian estar incluidos en Tidyverse install.packages(&quot;broom&quot;) # Convierte objetos de R a Tibbles, como &quot;readr&quot; install.packages(&quot;dbplyr&quot;) # Manipulaci√≥n de bases de datps (eg. SQL) install.packages(&quot;dplyr&quot;) # Manipulaci√≥n de datos mediante gramatica propia install.packages(&quot;fs&quot;) # Operaciones agnosticas de sistemas de archivos install.packages(&quot;haven&quot;) # Trabaja con archivos SPSS, Stata y SAS install.packages(&quot;httr&quot;) # Herramientas del protocolo HTTP, como GET, etc... install.packages(&quot;magrittr&quot;) # Operadores ca√±eria (pipes) %&gt;% install.packages(&quot;modelr&quot;) # Funciones de modelado compatibles con pipes install.packages(&quot;openssl&quot;) # Trabaja con certificados y encriptaci√≥n SSL install.packages(&quot;readr&quot;) # Traducci√≥n (pharsing) de archivos a una tibble install.packages(&quot;readxl&quot;) # Permite leer archivos de Excel install.packages(&quot;stringr&quot;) # Operadores consistentes para strings install.packages(&quot;tibble&quot;) # Dataframes del Siglo 21 (moderniza sintaxis) install.packages(&quot;gapminder&quot;) # data de Gapminder install.packages(&quot;gifski&quot;) # encoding de GIFs install.packages(&quot;av&quot;) # herramientas de audio y video install.packages(&quot;webshot&quot;) # screenshots de paginas web # Paquetes de graficos install.packages(&quot;ggplot2&quot;) # Graficos complejos install.packages(&quot;GGally&quot;) # extensi√≥n de ggplot2 install.packages(&quot;ggsci&quot;) # paletas de colores para publicaci√≥n install.packages(&quot;ggpubr&quot;) # ggplot simplificado para publicaciones install.packages(&quot;gganimate&quot;) # graficos animados install.packages(&quot;ggmuller&quot;) # diagrama de evolucionarios Muller install.packages(&quot;autoplotly&quot;) # visualizaciones interactivas install.packages(&quot;gridExtra&quot;) # extensi√≥n de grid, para la creaci√≥n de figuras # Paqutes para completaci√≥n de datos install.packages(&quot;missRanger&quot;) # Permite completar data incompleta (gaps) install.packages(&quot;outForest&quot;) # Detecci√≥n y reemplazo de outliers y gaps install.packages(&quot;OutlierDetection&quot;) # Detecci√≥n avanzada de outliers Una vez instalados los paquetes, R no es necesario correr estos comandos de nuevo, solo se convocan via library(PAQUETE). El repositorio funciona como una red sincronizada, y existen dos instancias en Chile: https://cran.dcc.uchile.cl/ (Departamento de Ciencias de la Computaci√≥n) y https://cran.dme.ufro.cl/ (Departamento de Matematicas y Estadistica). Por motivos de velocidad y para reducir carga sobre la red, es recomendable cambiar la configuraci√≥n de RStudio en ‚ÄúGlobal Options / Packages / Primary CRAN Repository‚Äù y seleccionar uno de estos (asumiendo que est√©n en Chile). Paquetes de Bioconductor Existen otros repositorios especializados que contienen paquetes dedicados a areas especificas de investigaci√≥n. Bioconductor tiene una colecci√≥n dedicada al analisis de datos genomicos y pipelines asociadas a estos, con m√°s de 1,900 paquetes, y software adicional no-basado en R. Estos se actualizan semi-anualmente siguiendo los releases de R. La instalaci√≥n de Bioconductor y paquetes asociados se maneja con el paquete BiocManager, disponible en CRAN. # Instalando Bioconductor if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) # Instala BiocManager de CRAN BiocManager::install() # Instala los paquetes base de Bioconductor # Requiere input del usuario en la consola (a) # Instalando paquetes de Bioconductor BiocManager::install(&quot;Biostrings&quot;) # Manipulaci√≥n de strings en biolog√≠a BiocManager::install(&quot;biomaRt&quot;) # Acceso a bases de datos biomedicas BiocManager::install(&quot;GEOquery&quot;) # Bases de datos de expresi√≥n genica # Paquetes complejos compilados desde codigo fuente # Lasciate ogni speranza, voi ch&#39;entrate BiocManager::install(&quot;RforProteomics&quot;, # Tidiverse para prote√≥mica ask = F, # sin promps de &quot;Instalar (y/n)&quot; dependencies = TRUE, # con Dependencias type = &quot;source&quot;, # Compila de fuente checkBuilt = TRUE) # Valida install BiocManager::install(&quot;MSnbase&quot;, # Funciones para espectrometria de masas ask = F, # sin promps de &quot;Instalar (y/n)&quot; dependencies = TRUE, # con Dependencias type = &quot;source&quot;, # Compila de fuente checkBuilt = TRUE) # Valida install Instalaci√≥n de R(Studio) en Windows Usando un gestor de paquetes Un gestor de paquetes es como apt-get de Debian, o install.packages() de R. Windows no trae uno incluido, pero existen soluciones como Chocolatey. Este se instala y maneja desde la consola de comandos PowerShell. Es la opci√≥n mas r√°pida, y funciona a largo plazo para cosas que no son R3 . Abrir Powershell como administrador (para que pueda instalar programas) Ejecutar el comando Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')). Esto instala Chocolatey. Ejecutar el comando choco install r rtools R.Studio --yes. Esto instala R, R-Tools y RStudio. üéâ (Instalaci√≥n lista!) En resumen (que se puede copiar y pegar en PowerShell): # Instalando Chocolatey Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;)) # Instalando R y RStudio choco install r rtools R.Studio --yes Instalaci√≥n manual RStudio es un Integrated Development Enviroment (IDE) para R, similar a una mascara para dar una interfaz amigable. No contiene R en si. Por ello, es necesario descargar R de CRAN, instalar el ejecutable, y luego descargar e instalar RStudio. Instalando R-tools manualmente Ciertos paquetes estan escritos en C/C++ por motivos de rendimiento, por lo que Windows requiere un compilador C para instalarlos. En R, este se suple por R-tools, distribuido en forma de un instalador ejecutable (desafortunadamente no en Chocolatey). R-tools (64bit &amp; 32bit) o para sistemas antiguos de 32bit Luego, en R ejecutar writeLines(&#39;PATH=&quot;${RTOOLS40_HOME}\\\\usr\\\\bin;${PATH}&quot;&#39;, con = &quot;~/.Renviron&quot;) Sys.which(&quot;make&quot;) # la salida deberia ser &quot;C:\\\\rtools40\\\\usr\\\\bin\\\\make.exe&quot; Paquetes generales con Chocolatey El comando choco install googlechrome steam choco install chimera permite instalar Google Chrome, Steam, y UCSF Chimera, en una unica linea. Se le puede a√±adir la confirmaci√≥n si a todo con la opci√≥n --yes‚Ü©Ô∏é "],["clase-1-conceptos-generales-ejemplos-de-casos-y-nociones-de-lenguajes-de-programaci√≥n.html", "1 CLASE 1 - Conceptos generales, ejemplos de casos y nociones de lenguajes de programaci√≥n 1.1 Interacci√≥n¬†con¬†terminales 1.2 Lenguajes¬†de¬†programaci√≥n e IDEs 1.3 Introducci√≥n a R y cuadernos 1.4 Importaci√≥n y analisis de datos", " 1 CLASE 1 - Conceptos generales, ejemplos de casos y nociones de lenguajes de programaci√≥n 1.1 Interacci√≥n¬†con¬†terminales La terminal es una herramienta que nos permite comunicarnos directamente con la computadora para ejecutar acciones complejas en unos pocos comandos. En si, es similar a como trabajamos con lenguajes interpretados como R, en el sentido de que enviamos comandos y recibimos respuestas (casi) inmediatas. Dependiendo de en que sistema nos encontramos, tenemos distintas SHELLs que interpretan los comandos, siguiendo una sintaxis u otra, con distintos niveles de ayuda al usuario. Por conveniencia, usaremos principalmente BASH, que es la SHELL mas comun encontrada en entornos Linux, que a su vez son los mas comunes en tareas de programacion para datascience y bioinformatica. Es posible instalar un entorno Linux en Windows usando Windows Subsystem for Linux. La mayor parte de estos comandos existen tanto en Linux como en Windows Powershell (aunque en este ultimo realmente son alias). La principal diferencia es como las shells manejan directorios, con / en POSIX y \\ en Windows; y como manejan comandos multilinea, \\ y ` respectivamente. La parte m√°s compleja y menos interoperable es cuando usamos comandos con -parametros. 1.1.1 Navegaci√≥n del sistema ls es LiSt, mapeado a Get-ChilItem en Powershell. ls -a lista todos los objetos en el directorio, incluyendo ocultos ls -lh genera una lista en formato lista, con permisos, due√±os, grupos, tama√±o, etc. ls -r1 | sort | uniq -c | sort -nr permite listar rapidamente archivos duplicados (por nombre) en un directorio y subdirectorios Los parametros no funcionan en Get-ChildItem cd es Change Directory, mapea Set-Directory en Powershell. cd /un/path/especifico cambia a un directorio segun un path directo o relativo cd $VAR dirige a un directorio definido por una variable ambiental, como $HOME cd .. permite subir al directorio superior, como en /home/directory a /home cd - es para volver rapidamente al directorio anterior. Util si cambian rapidamente entre un sub-sub-subdirectorio Los paths usan \\ en Windows. / no funciona mkdir es MaKe DIRectory, mapea a New-Item en Powershell. En *nix podemos crear multiples directorios y subdirectorios como mkdir -p Directorio/{Sub1,Sub2,Sub3} (sin espacios, solo ,) En Powershell necesitamos una sintaxis explicita; ie. mkdir Directorio\\Sub1, Directorio\\Sub2, ... ln,es LiNk, no existe un map directo en Powershell. ln -s &lt;target&gt; &lt;link&gt; permite crear un vinculo -simbolico ln -sf &lt;target&gt; &lt;link&gt; permite actualizar el vinculo simbolico Una opci√≥n en Windows es desempolvar la vieja CMD.exe, y usar MKLINK MKLINK \\D &lt;link&gt; &lt;target&gt; se√±ala un link de \\Directorios Los links son una forma comoda de apuntar a un archivo/directorio especifico que no est√° en nuestro ambiente local. Son comprendidos por el sistema como si el archivo estuviese ahi, a diferencia de un acceso directo. 1.1.2 Descargando archivos curl es C (see) URL, mapeado a Invoke-WebRequest en Powershell. curl &lt;url&gt; -o &lt;archivo&gt; descarga una URL para guardarla en un archivo curl -O &lt;url&gt; descarga la URL a un archvio con su nombre. Usualmente usamos esto wget es Web GET, mapeado a Invoke-WebRequest en Powershell. Es el m√°s facil de usar. wget &lt;url&gt; &lt;url2‚Ä¶&gt; descarga la URL a un archvio con su nombre wget -c &lt;url&gt; permite continuar una descarga interrumpida (muy util para cosas de varios GB) Invoke-WebRequest requiere un output explicito. Invoke-WebRequest &lt;url&gt; -OutFile &lt;archivo&gt; Invoke-WebRequest &lt;url&gt; -Method Get -o &lt;archivo&gt; funciona igual que Wget curl &lt;url&gt; -o &lt;archivo&gt; es valido en Windows base wget &quot;https://pseudo-dropbox.s3-us-west-2.amazonaws.com/Alejandro/baselines.tar.gz&quot; # Descargando un ejemplo 1.1.3 Descomprimiendo archivos tar, no existe en Windows. ‚Ä¶ xf ‚Ä¶ son parametros para eXtract y File tar xf &lt;tar.gz.bz2.xz&gt; desempaca un tar (comprimido) al directorio local tar xf &lt;tar.gz.bz2.xz&gt; -C &lt;directorio&gt; desempaca el tar a un directorio especifico Los tar por defecto no est√°n comprimidos. Un tar.gz si lo est√°. tar cf &lt;nuevo.tar&gt; &lt;archivo1 directorio/*&gt; crea un archivo tar. tar cgf &lt;nuevo.tar.gz&gt; &lt;archivo1 directorio/*&gt; crea un archivo tar comprimido. unzip, no existe en Windows. unzip &lt;zip&gt; extrae los contenidos de un zip en el directorio actual unzip &lt;zip&gt; -d &lt;directorio&gt; extrae el zip a una carpeta especifica zip -r &lt;nuevo.zip&gt; &lt;directorio&gt; comprime un directorio a un zip. Expand-Archive es una utilidad de Windows que funciona como unzip Expand-Archive &lt;zip&gt; &lt;directorio&gt; descomprime un zip en un directorio existente o nuevo Compress-Archive -Path &lt;directorio\\*&gt; -DestinationPath &lt;nuevo.zip&gt; crea un zip con los contenidos de directorio 7zip tiene linea de comandos para Linux, Mac, Windows. tar xf baselines.tar.gz 1.1.4 Explorando y renombrando archivos cat es conCATenate, mapeado a Get-Content en Powershell. cat &lt;archivo&gt; pasa los contenidos de archivo a la terminal, mostrandolos cat &lt;archivo1&gt; &lt;archivo2&gt; &gt; &lt;nuevo&gt; reemplaza los contenidos de nuevo por la concatenaci√≥n de archivo1 y archivo2 cat &lt;achivo3&gt; &gt;&gt; &lt;nuevo&gt; concatena archivo3 a nuevo head, no existe en Windows. head &lt;archivo&gt; muestra las 10 primeras lineas de archivo head -n &lt;archivo&gt; muestra las n primeras lineas de archivo En Windows, Get-Content &lt;archivo&gt; -TotalCount 10 tiene el mismo comportamiento tail, no existe en Windows. tail &lt;archivo&gt; muestra las 10 ultimas lineas de archivo tail -n &lt;archivo&gt; muestra las n ultimas lineas de archivo En Windows, Get-Content &lt;archivo&gt; -Tail 10 tiene el mismo comportamiento cd Ejemplo # Entra al directorio descomprimido cat script.r # Explorando el script 1.2 Lenguajes¬†de¬†programaci√≥n e IDEs 1.2.1 Tipos de lenguajes de programacion Lenguajes de programacion interpretados: son lenguajes en que cada linea es compilada e interpretada en evaluacion, dentro del llamado Read-Eval-Print-Loop (REPL). Esto premite que sean interactivos, dado que cada instruccion devuelve una respuesta inmediata, agilizando significativamente el desarrollo de programas. Python, R, etc. Lenguaje de programacion compilados: a diferencia de un lenguaje interpretado, este es compilado en su totalidad previa ejecucion del programa. Por esto, tienden a ser significativamente mas rapidos en ejecucion, a costa del tiempo de compilacion. C, C++, Fortran, Julia, etc. Lenguaje maquina: representan el nivel m√°s bajo al que el compilador traduce las instrucciones, el denominado codigo binario que opera fisicamente en el procesador. De cierta forma, la brecha entre lenguajes compilados se hace borrosa al considerar que una gran parte de las librerias que usamos en lenguajes interpretados son implementaciones escritas en C/C++, Fotran, u otros lenguajes compilados (ej. la libreria NumPy en Python); y ademas es posible usar compiladores just-in-time (JIT) para funciones de codigo interpretado (ej. Numba en Python, JIT en R). Por el otro lado, existen herramientas que permiten trabajar (casi) linea a linea con lenguajes compilados, como el paquete Pluto para Julia. Lenguaje de marcado: JSON, LaTeX, Markdown son lenguajes que permiten especificar estructuras de documentos. Existen formatos hibridos, como RMD, que incluyen la sintaxis de marcado de Markdown junto a la posibilidad de ejecutar codigo en R. El principal proposito de los RMD es que pueden ser compilados a documentos como informes, presentaciones, esta misma documentaci√≥n, etc. usando el paquete knitr para exportarlos a formato HTML, Word, PDF, etc. Por esto incluyen una gram√°tica de escritura simple y moderna, sin cosas como \\' para tildes. Los RMD no son programas, pero pueden ser usados como si lo fueran, por ejemplo en una pipeline de procesamiento dentro de un cluster de computo. Como la mezcla de texto plano y codigo puede hacerlos confusos, es recomendable que usen programas .r en lugar de cuadernos .rmd para este tipo de cosas. Cabe mencionar que el lenguaje de las SHELL puede ser considerado como un lenguaje interpretado, dado que ejecuta instrucciones de forma lineal aunque comunmente estas son llamar a programas ya compilados. 1.2.2 Integrated Development Environment Un IDE es comunmente una aplicaci√≥n con una interfaz R Studio fue originalmente creado para trabajar con R, pero actualmente es capaz de trabajar con multiples otros lenguajes como Python o BASH script directamente, apuntando a ser un entorno completo para datascience. VS Code es originalmente un editor de texto, pero cuenta con extensiones que facilmente lo convierten en un IDE poliglota para trabajar con R, Python, C, Julia, y casi cualquier lenguaje existente. Permite trabajar interactivamente con codigo R y Python La extensi√≥n LiveShare permite trabajar con colaboradores en tiempo real, a la Google Docs La extensi√≥n Remotes-SSH permite conectarlo a un entorno en otra maquina f√≠sica, lo cual es √∫til para trabajar en sistemas como un cluster HPC Jupyter es un entorno para trabajar con cuadernos, originalmente en Python pero ahora con m√∫ltiples interpretes como R o Julia. Dado que corre en un servidor y presenta una interfaz web, es com√∫nmente usado conectado a un backend mas potente que el computador del usuario. Se puede usar en Google Colab. La versi√≥n mas moderna es Jupyter Lab, que incluye funciones como m√∫ltiples pesta√±as, terminales, etc. Los cuadernos son f√°ciles de usar, pero el c√≥digo subyacente es un h√≠brido de Python y JSON para cada celda. Esto los hace mucho mas propensos a errores de replicabilidad, dado que un cambio en una celda NO afecta a las otras a menos que estas se corran de nuevo o se reinicie el Kernel. Aparte, sin Jupyter para mostrar los archivos, es complicado leer el codigo JSON y entender que hace el programa. 1.3 Introducci√≥n a R y cuadernos 1.3.1 Formato de R notebooks La sintaxis de R permite que el codigo sea legible para personas, y es posible a√±adir comentarios explicativos como # comentario. A√∫n as√≠, para un documento t√©cnico es necesaria m√°s informaci√≥n, como figuras, texto en italica, etc. Los cuadernos con extensi√≥n .Rmd permiten tomar notas m√°s largas, y aplicar formato como utilizando sintaxis Markdown, con algunas modificaciones. _ italica ** negrita ` monoespaciado Podemos a√±adir # al inicio de una linea para marcarla como titulo, sub-titulo, sub-sub-titulo, etc‚Ä¶ para as√≠ hacer un esquema m√°s ordenado. 1.3.2 Trabajando con chunks Los cuadernos seccionan el codigo en chunks, o secciones cortas de codigo. Podemos darles nombre de forma ```{r NOMBRE DEL CHUNK} Estas secciones luego pueden ejecutarse cada una como su propio script, accediendo a variables dejadas por las otras secciones. Por ejemplo, haciendo una definici√≥n de los tipos de objetos en R: A &lt;- 15.0 # N√∫mero B &lt;- 15e2 # N√∫mero en notaci√≥n cient√≠fica C &lt;- pi # Constantes definidas D &lt;- &#39;cadena de texto&#39; # Texto E &lt;- FALSE # Valores binarios M√°s otros objetos: V &lt;- c(1, 3, 5) # Un vector W &lt;- 7:9 # Otro vector, naturales desde 7 a 9 X &lt;- list(V, x &lt;- 2, &quot;texto&quot;) # Una lista, con distintos tipos de objetos con nombre Y &lt;- data.frame(V, W, c(7,8,9)) # Una lista con elementos del mismo largo # son m√°s complejos, y los veremos en detalle Estos dos chunks son independientes, por lo que podriamos modificarlos sin que se afecten entre si. Podemos usar los objetos creados en estos chunks fuera, en otros chunks del cuaderno: V*A # Multiplicando un vector (1,2,5) por un escalar (15) ## [1] 15 45 75 Luego, podemos usar el header del chunk (donde esta el nombre) para controlar otros atributos, como las salidas, warnings, o ejecuci√≥n del chunk. Un chunk sin ejecuci√≥n autom√°tica puede usarse para cargar las librer√≠as al inicio de la clase, dado que luego no necesario recargarlas durante la sesi√≥n. library(tidyverse) # Set de paquetes que hacen muchas cosas library(gapminder) # data de Gapminder library(gifski) # encoding de GIFs library(webshot) # screenshots de paginas web library(ggplot2) # Gr√°ficos complejos library(GGally) # extensi√≥n de ggplot2 library(ggsci) # paletas de colores para publicaci√≥n library(gganimate) # gr√°ficos animados library(ggmuller) # diagrama de evolucionarios Muller library(autoplotly) # visualizaciones interactivas library(gridExtra) # extensi√≥n de grid, para la creaci√≥n de figuras 1.4 Importaci√≥n y analisis de datos Podemos descargar datasets desde sitios publicos usando programas de la terminal, como wget wget https://pseudo-dropbox.s3-us-west-2.amazonaws.com/Alejandro/baselines.tar.gz wget https://pseudo-dropbox.s3-us-west-2.amazonaws.com/Alejandro/baseline.csv ## --2021-04-13 00:46:05-- https://pseudo-dropbox.s3-us-west-2.amazonaws.com/Alejandro/baselines.tar.gz ## Resolving pseudo-dropbox.s3-us-west-2.amazonaws.com (pseudo-dropbox.s3-us-west-2.amazonaws.com)... 52.218.154.49, 52.218.170.26 ## Connecting to pseudo-dropbox.s3-us-west-2.amazonaws.com (pseudo-dropbox.s3-us-west-2.amazonaws.com)|52.218.154.49|:443... connected. ## HTTP request sent, awaiting response... 200 OK ## Length: 368703 (360K) [application/x-tar] ## Saving to: ‚Äòbaselines.tar.gz.2‚Äô ## ## 0K .......... .......... .......... .......... .......... 13% 207K 1s ## 50K .......... .......... .......... .......... .......... 27% 211K 1s ## 100K .......... .......... .......... .......... .......... 41% 250K 1s ## 150K .......... .......... .......... .......... .......... 55% 2.78M 1s ## 200K .......... .......... .......... .......... .......... 69% 5.76M 0s ## 250K .......... .......... .......... .......... .......... 83% 257K 0s ## 300K .......... .......... .......... .......... .......... 97% 3.07M 0s ## 350K .......... 100% 2.87M=0.9s ## ## 2021-04-13 00:46:07 (392 KB/s) - ‚Äòbaselines.tar.gz.2‚Äô saved [368703/368703] ## ## --2021-04-13 00:46:07-- https://pseudo-dropbox.s3-us-west-2.amazonaws.com/Alejandro/baseline.csv ## Resolving pseudo-dropbox.s3-us-west-2.amazonaws.com (pseudo-dropbox.s3-us-west-2.amazonaws.com)... 52.218.154.49, 52.218.228.17 ## Connecting to pseudo-dropbox.s3-us-west-2.amazonaws.com (pseudo-dropbox.s3-us-west-2.amazonaws.com)|52.218.154.49|:443... connected. ## HTTP request sent, awaiting response... 200 OK ## Length: 206369 (202K) [text/csv] ## Saving to: ‚Äòbaseline.csv.2‚Äô ## ## 0K .......... .......... .......... .......... .......... 24% 225K 1s ## 50K .......... .......... .......... .......... .......... 49% 243K 0s ## 100K .......... .......... .......... .......... .......... 74% 4.47M 0s ## 150K .......... .......... .......... .......... .......... 99% 248K 0s ## 200K . 100% 2922G=0.6s ## ## 2021-04-13 00:46:09 (315 KB/s) - ‚Äòbaseline.csv.2‚Äô saved [206369/206369] El archivo baselines.tar.gz es un comprimido, por lo que es necesario abrirlo con tar, desde la terminal. tar xf baselines.tar.gz Finalmente, importar los archivos descargados a la sesi√≥n de R. library(tidyverse) library(readxl) baseline_csv &lt;- read_csv(&quot;baseline.csv&quot;) baseline_tsv &lt;- read_tsv(&quot;baseline.tsv&quot;) baseline_xlsx &lt;- read_excel(&quot;baseline.xlsx&quot;) Viendo el contenido de uno de estos archivos head( baseline_csv ) ## # A tibble: 6 x 10 ## X1 harmonic_central‚Ä¶ eigenvector_cent‚Ä¶ betweenness_cent‚Ä¶ closeness_centr‚Ä¶ ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 DM_10f‚Ä¶ 223. 0.00000739 0 0.189 ## 2 DM_10f‚Ä¶ 223. 0.00000739 0 0.189 ## 3 DM_10f‚Ä¶ 223. 0.00000370 0 0.189 ## 4 DM_5thf 224. 0.00000741 0 0.190 ## 5 DM_6dhf 223. 0.00000739 0 0.189 ## 6 DM_6thf 223. 0.00000739 0 0.189 ## # ‚Ä¶ with 5 more variables: load_centrality &lt;dbl&gt;, information_centrality &lt;dbl&gt;, ## # communicability_betweenness_centrality &lt;dbl&gt;, katz_centrality_numpy &lt;dbl&gt;, ## # pagerank &lt;dbl&gt; "]]
