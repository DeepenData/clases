[["index.html", "Principios de bioinform√°tica y ciencias de biodatos Presentaci√≥n", " Principios de bioinform√°tica y ciencias de biodatos Alejandro Acevedo-Aracena, PhD1; Manuel Mu√±oz-Gonz√°lez2 2021-04-08 Presentaci√≥n Los avances en la obtenci√≥n de datos biol√≥gicos asociados a genes, prote√≠nas y metabolitos han dado lugar a un r√°pido aumento del volumen y complejidad de datos publicados en distintos repositorios de libre acceso (por ejemplo Gene Expression Omnibus de NCBI). Actualmente se requiere de bioinform√°ticos que apliquen herramientas bioinform√°ticas y ciencia de datos para generar resultados biol√≥gicamente interpretables desde datos complejos y diversos. Este curso est√° orientado a alumnos sin ning√∫n conocimiento previo sobre programaci√≥n y computacional ni bioinform√°tica. Se espera que al final del curso los alumnos dominen herramientas b√°sicas de bioinform√°tica y principios generales de ciencia de datos para aplicarlos en sus respectivas √°reas de investigaci√≥n. FONDECYT Postdoctoral Fellow, Universidad de Chile, deepen.data@gmail.com‚Ü©Ô∏é Pregrado, Universidad de Chile‚Ü©Ô∏é "],["setup-del-ambiente.html", "Setup del ambiente Paquetes de CRAN Paquetes de Bioconductor Instalaci√≥n de R(Studio) en Windows", " Setup del ambiente Paquetes de CRAN CRAN (Comprehensive R Archive Network) es el repositorio principal de R, con m√°s de 16,000 paquetes disponibles en multiples ambitos de analisis de datos, ciencias (astronomia, biolog√≠a, matematica, sociolog√≠a, etc.) y econom√≠a. De aqui instalamos: options(install.packages.check.source = &quot;yes&quot;) # Chequea la fuente de los paquetes install.packages(&quot;devtools&quot;) # Utilidades de manejo de archivos, descargas, etc. install.packages(&quot;tidyverse&quot;) # Set de paquetes que hacen muchas cosas # Analisis no lineal, manipulaci√≥n de texto, etc... # Paquetes que deberian estar incluidos en Tidyverse install.packages(&quot;broom&quot;) # Convierte objetos de R a Tibbles, como &quot;readr&quot; install.packages(&quot;dbplyr&quot;) # Manipulaci√≥n de bases de datps (eg. SQL) install.packages(&quot;dplyr&quot;) # Manipulaci√≥n de datos mediante gramatica propia install.packages(&quot;fs&quot;) # Operaciones agnosticas de sistemas de archivos install.packages(&quot;haven&quot;) # Trabaja con archivos SPSS, Stata y SAS install.packages(&quot;httr&quot;) # Herramientas del protocolo HTTP, como GET, etc... install.packages(&quot;magrittr&quot;) # Operadores ca√±eria (pipes) %&gt;% install.packages(&quot;modelr&quot;) # Funciones de modelado compatibles con pipes install.packages(&quot;openssl&quot;) # Trabaja con certificados y encriptaci√≥n SSL install.packages(&quot;readr&quot;) # Traducci√≥n (pharsing) de archivos a una tibble install.packages(&quot;readxl&quot;) # Permite leer archivos de Excel install.packages(&quot;stringr&quot;) # Operadores consistentes para strings install.packages(&quot;tibble&quot;) # Dataframes del Siglo 21 (moderniza sintaxis) install.packages(&quot;gapminder&quot;) # data de Gapminder install.packages(&quot;gifski&quot;) # encoding de GIFs install.packages(&quot;av&quot;) # herramientas de audio y video install.packages(&quot;webshot&quot;) # screenshots de paginas web # Paquetes de graficos install.packages(&quot;ggplot2&quot;) # Graficos complejos install.packages(&quot;GGally&quot;) # extensi√≥n de ggplot2 install.packages(&quot;ggsci&quot;) # paletas de colores para publicaci√≥n install.packages(&quot;ggpubr&quot;) # ggplot simplificado para publicaciones install.packages(&quot;gganimate&quot;) # graficos animados install.packages(&quot;ggmuller&quot;) # diagrama de evolucionarios Muller install.packages(&quot;autoplotly&quot;) # visualizaciones interactivas install.packages(&quot;gridExtra&quot;) # extensi√≥n de grid, para la creaci√≥n de figuras # Paqutes para completaci√≥n de datos install.packages(&quot;missRanger&quot;) # Permite completar data incompleta (gaps) install.packages(&quot;outForest&quot;) # Detecci√≥n y reemplazo de outliers y gaps install.packages(&quot;OutlierDetection&quot;) # Detecci√≥n avanzada de outliers Una vez instalados los paquetes, R no es necesario correr estos comandos de nuevo, solo se convocan via library(PAQUETE). El repositorio funciona como una red sincronizada, y existen dos instancias en Chile: https://cran.dcc.uchile.cl/ (Departamento de Ciencias de la Computaci√≥n) y https://cran.dme.ufro.cl/ (Departamento de Matematicas y Estadistica). Por motivos de velocidad y para reducir carga sobre la red, es recomendable cambiar la configuraci√≥n de RStudio en ‚ÄúGlobal Options / Packages / Primary CRAN Repository‚Äù y seleccionar uno de estos (asumiendo que est√©n en Chile). Paquetes de Bioconductor Existen otros repositorios especializados que contienen paquetes dedicados a areas especificas de investigaci√≥n. Bioconductor tiene una colecci√≥n dedicada al analisis de datos genomicos y pipelines asociadas a estos, con m√°s de 1,900 paquetes, y software adicional no-basado en R. Estos se actualizan semi-anualmente siguiendo los releases de R. La isntalaci√≥n de Bioconductor y paquetes asociados se maneja con el paquete BiocManager, disponible en CRAN. # Instalando Bioconductor if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) # Instala BiocManager de CRAN BiocManager::install() # Instala los paquetes base de Bioconductor # Requiere input del usuario en la consola (a) # Instalando paquetes de Bioconductor BiocManager::install(&quot;Biostrings&quot;) # Manipulaci√≥n de strings en biolog√≠a BiocManager::install(&quot;biomaRt&quot;) # Acceso a bases de datos biomedicas BiocManager::install(&quot;GEOquery&quot;) # Bases de datos de expresi√≥n genica # Paquetes complejos compilados desde codigo fuente # Lasciate ogni speranza, voi ch&#39;entrate BiocManager::install(&quot;RforProteomics&quot;, # Tidiverse para prote√≥mica ask = F, # sin promps de &quot;Instalar (y/n)&quot; dependencies = TRUE, # con Dependencias type = &quot;source&quot;, # Compila de fuente checkBuilt = TRUE) # Valida install BiocManager::install(&quot;MSnbase&quot;, # Funciones para espectrometria de masas ask = F, # sin promps de &quot;Instalar (y/n)&quot; dependencies = TRUE, # con Dependencias type = &quot;source&quot;, # Compila de fuente checkBuilt = TRUE) # Valida install Instalaci√≥n de R(Studio) en Windows Usando un gestor de paquetes Un gestor de paquetes es como apt-get de Debian, o install.packages() de R. Windows no trae uno incluido, pero existen soluciones como Chocolatey. Este se instala y maneja desde la consola de comandos PowerShell. Es la opci√≥n mas r√°pida, y funciona a largo plazo para cosas que no son R3 . Abrir Powershell como administrador (para que pueda instalar programas) Ejecutar el comando Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')). Esto instala Chocolatey. Ejecutar el comando choco install r choco install rtools R.Studio --yes. Esto instala R, R-Tools y RStudio. üéâ (Instalaci√≥n lista!) En resumen (que se puede copiar y pegar en PowerShell): # Instalando Chocolatey Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;)) # Instalando R y RStudio choco install r choco install rtools R.Studio --yes Instalaci√≥n manual RStudio es un Integrated Development Enviroment (IDE) para R, similar a una mascara para dar una interfaz amigable. No contiene R en si. Por ello, es necesario descargar R de CRAN, instalar el ejecutable, y luego descargar e instalar RStudio. Instalando R-tools manualmente Ciertos paquetes estan escritos en C/C++ por motivos de rendimiento, por lo que Windows requiere un compilador C para instalarlos. En R, este se suple por R-tools, distribuido en forma de un instalador ejecutable (desafortunadamente no en Chocolatey). R-tools (64bit &amp; 32bit) o para sistemas antiguos de 32bit Luego, en R ejecutar writeLines(&#39;PATH=&quot;${RTOOLS40_HOME}\\\\usr\\\\bin;${PATH}&quot;&#39;, con = &quot;~/.Renviron&quot;) Sys.which(&quot;make&quot;) # la salida deberia ser &quot;C:\\\\rtools40\\\\usr\\\\bin\\\\make.exe&quot; Paquetes generales con Chocolatey El comando choco install googlechrome steam choco install chimera permite instalar Google Chrome, Steam, y UCSF Chimera, en una unica linea. Se le puede a√±adir la confirmaci√≥n si a todo con la opci√≥n --yes‚Ü©Ô∏é "],["clase-1-conceptos-generales-ejemplos-de-casos-y-nociones-de-lenguajes-de-programaci√≥n.html", "1 CLASE 1 - Conceptos generales, ejemplos de casos y nociones de lenguajes de programaci√≥n 1.1 Interacci√≥n¬†con¬†terminales 1.2 Lenguajes¬†de¬†programaci√≥n e IDEs 1.3 Introducci√≥n a R y cuadernos 1.4 Importaci√≥n y analisis de datos 1.5 Exploraci√≥n de datos", " 1 CLASE 1 - Conceptos generales, ejemplos de casos y nociones de lenguajes de programaci√≥n 1.1 Interacci√≥n¬†con¬†terminales La terminal es una herramienta que nos permite comunicarnos directamente con la computadora para ejecutar acciones complejas en unos pocos comandos. En si, es similar a como trabajamos con lenguajes interpretados como R, en el sentido de que enviamos comandos y recibimos respuestas (casi) inmediatas. Dependiendo de en que sistema nos encontramos, tenemos distintas SHELLs que interpretan los comandos, siguiendo una sintaxis u otra, con distintos niveles de ayuda al usuario. Por conveniencia, usaremos principalmente BASH, que es la SHELL mas comun encontrada en entornos Linux, que a su vez son los mas comunes en tareas de programacion para datascience y bioinformatica. Es posible instalar un entorno Linux en Windows usando WSL ([[Windows-Subsystem-for-Linux]]). La mayor parte de estos comandos existen tanto en Linux como en Windows Powershell (aunque en este ultimo realmente son alias). La principal diferencia es como las shells manejan directorios, con / en POSIX y \\ en Windows; y como manejan comandos multilinea, \\ y ` respectivamente. La parte m√°s compleja y menos interoperable es cuando usamos comandos con -parametros. 1.1.1 Navegaci√≥n del sistema ls es LiSt, mapeado a Get-ChilItem en Powershell. ls -a lista todos los objetos en el directorio, incluyendo ocultos ls -lh genera una lista en formato lista, con permisos, due√±os, grupos, tama√±o, etc. ls -r1 | sort | uniq -c | sort -nr permite listar rapidamente archivos duplicados (por nombre) en un directorio y subdirectorios Los parametros no funcionan en Get-ChildItem cd es Change Directory, mapea Set-Directory en Powershell. cd /un/path/especifico cambia a un directorio segun un path directo o relativo cd $VAR dirige a un directorio definido por una variable ambiental, como $HOME cd .. permite subir al directorio superior, como en /home/directory a /home cd - es para volver rapidamente al directorio anterior. Util si cambian rapidamente entre un sub-sub-subdirectorio Los paths usan \\ en Windows. / no funciona mkdir es MaKe DIRectory, mapea a New-Item en Powershell. En *nix podemos crear multiples directorios y subdirectorios como mkdir -p Directorio/{Sub1,Sub2,Sub3} (sin espacios, solo ,) En Powershell necesitamos una sintaxis explicita; ie. mkdir Directorio\\Sub1, Directorio\\Sub2, ... ln,es LiNk, no existe un map directo en Powershell. ln -s &lt;target&gt; &lt;link&gt; permite crear un vinculo -simbolico ln -sf &lt;target&gt; &lt;link&gt; permite actualizar el vinculo simbolico Una opci√≥n en Windows es desempolvar la vieja CMD.exe, y usar MKLINK MKLINK \\D &lt;link&gt; &lt;target&gt; se√±ala un link de \\Directorios Los links son una forma comoda de apuntar a un archivo/directorio especifico que no est√° en nuestro ambiente local. Son comprendidos por el sistema como si el archivo estuviese ahi, a diferencia de un acceso directo. 1.1.2 Descargando archivos curl es C (see) URL, mapeado a Invoke-WebRequest en Powershell. curl &lt;url&gt; -o &lt;archivo&gt; descarga una URL para guardarla en un archivo curl -O &lt;url&gt; descarga la URL a un archvio con su nombre. Usualmente usamos esto wget es Web GET, mapeado a Invoke-WebRequest en Powershell. Es el m√°s facil de usar. wget &lt;url&gt; &lt;url2‚Ä¶&gt; descarga la URL a un archvio con su nombre wget -c &lt;url&gt; permite continuar una descarga interrumpida (muy util para cosas de varios GB) Invoke-WebRequest requiere un output explicito. Invoke-WebRequest &lt;url&gt; -OutFile &lt;archivo&gt; Invoke-WebRequest &lt;url&gt; -Method Get -o &lt;archivo&gt; funciona igual que Wget curl &lt;url&gt; -o &lt;archivo&gt; es valido en Windows base curl &quot;https://datosrnaseq.s3.amazonaws.com/ejemplo.zip&quot; -o &quot;ejemplo.zip&quot; # Descargando un ejemplo 1.1.3 Descomprimiendo archivos tar, no existe en Windows. ‚Ä¶ xf ‚Ä¶ son parametros para eXtract y File tar xf &lt;tar.gz.bz2.xz&gt; desempaca un tar (comprimido) al directorio local tar xf &lt;tar.gz.bz2.xz&gt; -C &lt;directorio&gt; desempaca el tar a un directorio especifico Los tar por defecto no est√°n comprimidos. Un tar.gz si lo est√°. tar cf &lt;nuevo.tar&gt; &lt;archivo1 directorio/*&gt; crea un archivo tar. tar cgf &lt;nuevo.tar.gz&gt; &lt;archivo1 directorio/*&gt; crea un archivo tar comprimido. unzip, no existe en Windows. unzip &lt;zip&gt; extrae los contenidos de un zip en el directorio actual unzip &lt;zip&gt; -d &lt;directorio&gt; extrae el zip a una carpeta especifica zip -r &lt;nuevo.zip&gt; &lt;directorio&gt; comprime un directorio a un zip. Expand-Archive es una utilidad de Windows que funciona como unzip Expand-Archive &lt;zip&gt; &lt;directorio&gt; descomprime un zip en un directorio existente o nuevo Compress-Archive -Path &lt;directorio\\*&gt; -DestinationPath &lt;nuevo.zip&gt; crea un zip con los contenidos de directorio 7zip tiene linea de comandos para Linux, Mac, Windows. unzip ejemplo.zip -d Ejemplo # Linux Expand-Archive ejemplo.zip Ejemplo # PowerShell 1.1.4 Explorando y renombrando archivos cat es conCATenate, mapeado a Get-Content en Powershell. cat &lt;archivo&gt; pasa los contenidos de archivo a la terminal, mostrandolos cat &lt;archivo1&gt; &lt;archivo2&gt; &gt; &lt;nuevo&gt; reemplaza los contenidos de nuevo por la concatenaci√≥n de archivo1 y archivo2 cat &lt;achivo3&gt; &gt;&gt; &lt;nuevo&gt; concatena archivo3 a nuevo head, no existe en Windows. head &lt;archivo&gt; muestra las 10 primeras lineas de archivo head -n &lt;archivo&gt; muestra las n primeras lineas de archivo En Windows, Get-Content &lt;archivo&gt; -TotalCount 10 tiene el mismo comportamiento tail, no existe en Windows. tail &lt;archivo&gt; muestra las 10 ultimas lineas de archivo tail -n &lt;archivo&gt; muestra las n ultimas lineas de archivo En Windows, Get-Content &lt;archivo&gt; -Tail 10 tiene el mismo comportamiento cd Ejemplo # Entra al directorio descomprimido cat script.r # Explorando el script 1.2 Lenguajes¬†de¬†programaci√≥n e IDEs 1.2.1 Tipos de lenguajes de programacion Lenguajes de programacion interpretados: son lenguajes en que cada linea es compilada e interpretada en evaluacion, dentro del llamado Read-Eval-Print-Loop (REPL). Esto premite que sean interactivos, dado que cada instruccion devuelve una respuesta inmediata, agilizando significativamente el desarrollo de programas. Python, R, etc. Lenguaje de programacion compilados: a diferencia de un lenguaje interpretado, este es compilado en su totalidad previa ejecucion del programa. Por esto, tienden a ser significativamente mas rapidos en ejecucion, a costa del tiempo de compilacion. C, C++, Fortran, Julia, etc. Lenguaje maquina: representan el nivel m√°s bajo al que el compilador traduce las instrucciones, el denominado codigo binario que opera fisicamente en el procesador. De cierta forma, la brecha entre lenguajes compilados se hace borrosa al considerar que una gran parte de las librerias que usamos en lenguajes interpretados son implementaciones escritas en C/C++, Fotran, u otros lenguajes compilados (ej. la libreria NumPy en Python); y ademas es posible usar compiladores just-in-time (JIT) para funciones de codigo interpretado (ej. Numba en Python, JIT en R). Lenguaje de marcado: JSON, LaTeX, Markdown son lenguajes que permiten especificar estructuras de documentos. Existen formatos hibridos, como RMD, que incluyen la sintaxis de marcado de Markdown junto a la posibilidad de ejecutar codigo en R. Cabe mencionar que el lenguaje de las SHELL puede ser considerado como un lenguaje interpretado, dado que ejecuta instrucciones de forma lineal aunque comunmente estas son llamar a programas ya compilados. 1.2.2 Integrated Development Environment Un IDE es comunmente una aplicacion con una interfaz R Studio fue originalmente creado para trabajar con R, pero actualmente es capaz de trabajar con multiples otros lenguajes como Python o BASH script directamente, apuntando a ser un entorno completo para datascience. VS Code es originalmente un editor de texto, pero cuenta con extensiones que facilmente lo convierten en un IDE poliglota para trabajar con R, Python, C, Julia, y casi cualquier lenguaje existente. Permite trabajar interactivamente con codigo R y Python La extension LiveShare permite trabajar con colaboradores en tiempo real, a la Google Docs La extension Remotes-SSH permite conectarlo a un entorno en otra maquina fisica, lo cual es util para trabajar en sistemas como un cluster HPC Jupyter es un entorno para trabajar con cuadernos, originalmente en Python pero ahora con multiples interpretes como R o Julia. Dado que corre en un servidor y presenta una interfaz web, es comunmente usado conectado a un backend mas potente que el computador del usuario. Se puede usar en Google Colab. La version mas moderna es Jupyter Lab, que incluye funciones como multiples pestanas, terminales, etc. Los cuadernos son faciles de usar, pero el codigo subyacente es un hibrido de Python y JSON para cada celda. Esto los hace mucho mas propensos a errores de replicabilidad, dado que un cambio en una celda NO afecta a las otras a menos que estas se corran de nuevo o se reinicie el Kernel. Aparte, sin Jupyter para mostrar los archivos, es complicado leer el codigo JSON y entender que hace el programa. 1.3 Introducci√≥n a R y cuadernos 1.3.1 Formato de R notebooks La sintaxis de R permite que el codigo sea legible para personas, y es posible a√±adir comentarios explicativos como # comentario. Los cuadernos con extensi√≥n .Rmd permiten tomar notas m√°s largas, y aplicar formato como utilizando sintaxis Markdown, con algunas modificaciones. _ italica ** negrita ` monoespaciado Podemos a√±adir # al inicio de una linea para marcarla como titulo, sub-titulo, sub-sub-titulo, etc‚Ä¶ para as√≠ hacer un esquema m√°s ordenado. 1.3.2 Trabajando con chunks Los cuadernos seccionan el codigo en chunks, o secciones cortas de codigo. Podemos darles nombre de forma ```{r NOMBRE DEL CHUNK} Estas secciones luego pueden ejecutarse cada una como su propio script, accediendo a variables dejadas por las otras secciones. Por ejemplo, haciendo una definici√≥n de los tipos de objetos en R: A &lt;- 15.0 # N√∫mero B &lt;- 15e2 # N√∫mero en notaci√≥n cientifica C &lt;- pi # Constantes definidas D &lt;- &#39;cadena de texto&#39; # Texto E &lt;- FALSE # Valores binarios M√°s otros objetos: V &lt;- c(1, 3, 5) # Un vector W &lt;- 7:9 # Otro vector, naturales desde 7 a 9 X &lt;- list(V, x &lt;- 2, &quot;texto&quot;) # Una lista, con distintos tipos de objetos con nombre Y &lt;- data.frame(V, W, c(7,8,9)) # Una lista con elementos del mismo largo # son m√°s complejos, y los veremos en detalle Estos dos chunks son independientes, por lo que podriamos modificarlos sin que se afecten entre si. Podemos usar los objetos creados en estos chunks fuera, en otros chunks del cuaderno: V*A # Multiplicando un vector (1,2,5) por un escalar (15) ## [1] 15 45 75 Luego, podemos usar el header del chunk (donde esta el nombre) para controlar otros atributos, como las salidas, warnings, o ejecuci√≥n del chunk. Un chunk sin ejecuci√≥n automatica puede usarse para cargar las librerias al inicio de la clase, dado que luego no necesario recargarlas durante la sesi√≥n. library(tidyverse) # Set de paquetes que hacen muchas cosas library(gapminder) # data de Gapminder library(gifski) # encoding de GIFs #library(av) # herramientas de audio y video library(webshot) # screenshots de paginas web library(ggplot2) # Graficos complejos library(GGally) # extensi√≥n de ggplot2 library(ggsci) # paletas de colores para publicacion library(gganimate) # graficos animados library(ggmuller) # diagrama de evolucionarios Muller library(autoplotly) # visualizaciones interactivas library(gridExtra) # extensi√≥n de grid, para la creaci√≥n de figuras 1.4 Importaci√≥n y analisis de datos 1.4.1 Listas Un vector, definido como c(1,2,\"abc\",...) es util para contener datos simples, como los valores obtenidos de mediciones repetidas o los nombres de personas. Para elementos m√°s complejos se recurre a las listas, definidas como list(\"a\",b &lt;- c(1,2,3), 15e2). data(&#39;psychademic&#39;) # requiere GGally data(&#39;diamonds&#39;) # requiere ggplot2 data(&#39;iris&#39;) # no requiere m√°s paquetes sets.de.datos &lt;- list() # Crea una lista &quot;set.de.datos&quot; sets.de.datos[[&#39;sicoacademico&#39;]] &lt;- psychademic # A√±adimos los datos de psychademic sets.de.datos[[&#39;diamantes&#39;]] &lt;- diamonds # A√±adimos los datos de diamonds sets.de.datos[[&#39;flores&#39;]] &lt;- iris # A√±adimos los datos de iris 1.4.2 Flujo de datos Para controlar cascadas de datos, utilizamos el operador %&gt;% , pipe, el cual toma la salida de una funci√≥n o los datos presentados, y los introduce como entrada en la siguiente funci√≥n. #{r Flujo de datos, echo=TRUE} # Utilizando %&gt;% (pipe) sets.de.datos$sicoacademico %&gt;% head() # Formato est√°ndar para funciones head(sets.de.datos$sicoacademico) 1.5 Exploraci√≥n de datos Para simplificar los analisis, trabajamos con un unico set. mi.set = sets.de.datos$sicoacademico Existen varios funciones para el analisis de la estructura de datos. Paquetes como tibble (incluido en tidyverse) a√±aden funciones adicionales. mi.set %&gt;% class() # tipo de objeto (es un dataframe) ## [1] &quot;data.frame&quot; mi.set %&gt;% dim() # dimensiones del dataframe (600 x 8) ## [1] 600 8 mi.set %&gt;% length() # largo (columnas) del dataframe ## [1] 8 mi.set %&gt;% head() # primeras 10 filas del dataframe &lt;!-- R utils --&gt; ## locus_of_control self_concept motivation read write math science sex ## 1 -0.84 -0.24 4 54.8 64.5 44.5 52.6 female ## 2 -0.38 -0.47 3 62.7 43.7 44.7 52.6 female ## 3 0.89 0.59 3 60.6 56.7 70.5 58.0 male ## 4 0.71 0.28 3 62.7 56.7 54.7 58.0 male ## 5 -0.64 0.03 4 41.6 46.3 38.4 36.3 female ## 6 1.11 0.90 2 62.7 64.5 61.4 58.0 female mi.set %&gt;% names() # Nombre de las columnas del dataframe (locus..., self) ## [1] &quot;locus_of_control&quot; &quot;self_concept&quot; &quot;motivation&quot; &quot;read&quot; ## [5] &quot;write&quot; &quot;math&quot; &quot;science&quot; &quot;sex&quot; mi.set %&gt;% colnames() # Nombre de las columnas. Similar a names() ## [1] &quot;locus_of_control&quot; &quot;self_concept&quot; &quot;motivation&quot; &quot;read&quot; ## [5] &quot;write&quot; &quot;math&quot; &quot;science&quot; &quot;sex&quot; mi.set %&gt;% attributes() # propiedades del objeto. Similar a class() ## $names ## [1] &quot;locus_of_control&quot; &quot;self_concept&quot; &quot;motivation&quot; &quot;read&quot; ## [5] &quot;write&quot; &quot;math&quot; &quot;science&quot; &quot;sex&quot; ## ## $row.names ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ## [19] 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ## [37] 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 ## [55] 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 ## [73] 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 ## [91] 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 ## [109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 ## [127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 ## [145] 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 ## [163] 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 ## [181] 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 ## [199] 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 ## [217] 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 ## [235] 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 ## [253] 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 ## [271] 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 ## [289] 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 ## [307] 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 ## [325] 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 ## [343] 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 ## [361] 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 ## [379] 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 ## [397] 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 ## [415] 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 ## [433] 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 ## [451] 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 ## [469] 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 ## [487] 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 ## [505] 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 ## [523] 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 ## [541] 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 ## [559] 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 ## [577] 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 ## [595] 595 596 597 598 599 600 ## ## $academic ## [1] &quot;read&quot; &quot;write&quot; &quot;math&quot; &quot;science&quot; &quot;sex&quot; ## ## $psychology ## [1] &quot;locus_of_control&quot; &quot;self_concept&quot; &quot;motivation&quot; ## ## $class ## [1] &quot;data.frame&quot; mi.set %&gt;% str() # Convierte el dataframe a un string. &lt;!-- R utils --&gt; ## &#39;data.frame&#39;: 600 obs. of 8 variables: ## $ locus_of_control: num -0.84 -0.38 0.89 0.71 -0.64 1.11 0.06 -0.91 0.45 0 ... ## $ self_concept : num -0.24 -0.47 0.59 0.28 0.03 0.9 0.03 -0.59 0.03 0.03 ... ## $ motivation : chr &quot;4&quot; &quot;3&quot; &quot;3&quot; &quot;3&quot; ... ## $ read : num 54.8 62.7 60.6 62.7 41.6 62.7 41.6 44.2 62.7 62.7 ... ## $ write : num 64.5 43.7 56.7 56.7 46.3 64.5 39.1 39.1 51.5 64.5 ... ## $ math : num 44.5 44.7 70.5 54.7 38.4 61.4 56.3 46.3 54.4 38.3 ... ## $ science : num 52.6 52.6 58 58 36.3 58 45 36.3 49.8 55.8 ... ## $ sex : chr &quot;female&quot; &quot;female&quot; &quot;male&quot; &quot;male&quot; ... ## - attr(*, &quot;academic&quot;)= chr [1:5] &quot;read&quot; &quot;write&quot; &quot;math&quot; &quot;science&quot; ... ## - attr(*, &quot;psychology&quot;)= chr [1:3] &quot;locus_of_control&quot; &quot;self_concept&quot; &quot;motivation&quot; mi.set %&gt;% glimpse() # Muy util para explorar, muestra las columnas con algunos datos de ejemplo, se√±alando que tipo de datos son. (Podemos ver el error en &quot;motivation&quot; en que datos tipo &quot;1, 3, 2, ...&quot; son caracteres en lugar de integros) ## Rows: 600 ## Columns: 8 ## $ locus_of_control &lt;dbl&gt; -0.84, -0.38, 0.89, 0.71, -0.64, 1.11, 0.06, -0.91, 0‚Ä¶ ## $ self_concept &lt;dbl&gt; -0.24, -0.47, 0.59, 0.28, 0.03, 0.90, 0.03, -0.59, 0.‚Ä¶ ## $ motivation &lt;chr&gt; &quot;4&quot;, &quot;3&quot;, &quot;3&quot;, &quot;3&quot;, &quot;4&quot;, &quot;2&quot;, &quot;3&quot;, &quot;3&quot;, &quot;4&quot;, &quot;3&quot;, &quot;2&quot;‚Ä¶ ## $ read &lt;dbl&gt; 54.8, 62.7, 60.6, 62.7, 41.6, 62.7, 41.6, 44.2, 62.7,‚Ä¶ ## $ write &lt;dbl&gt; 64.5, 43.7, 56.7, 56.7, 46.3, 64.5, 39.1, 39.1, 51.5,‚Ä¶ ## $ math &lt;dbl&gt; 44.5, 44.7, 70.5, 54.7, 38.4, 61.4, 56.3, 46.3, 54.4,‚Ä¶ ## $ science &lt;dbl&gt; 52.6, 52.6, 58.0, 58.0, 36.3, 58.0, 45.0, 36.3, 49.8,‚Ä¶ ## $ sex &lt;chr&gt; &quot;female&quot;, &quot;female&quot;, &quot;male&quot;, &quot;male&quot;, &quot;female&quot;, &quot;female‚Ä¶ 1.5.1 Pipelines para limpieza de datos Es posible construir analisis m√°s complejos usando el operador pipe. mi.set %&gt;% colnames() %&gt;% class() # Hace una lista del nombre de las columnas en el subset, y luego pregunta que tipo de data esta en esta lista. ## [1] &quot;character&quot; nombres.filas &lt;- mi.set %&gt;% rownames() # Hace una lista con los nombres de las filas del subset &quot;mi.set&quot;, y luego los guarda como un objeto &quot;nombres.filas&quot; mi.set %&gt;% colnames() -&gt; nombres.columnas # Hace una lista con los nombres de las columnas del subset &quot;mi.set&quot;, y luego los guarda como un objeto &quot;nombres.filas&quot; # lo interesante es como se puede hacer lo mismo escribiendolo de dos formas. A menudo los datos vienen en un formato que no es conveniente para lo que queremos, ya sea porque los nombres son cripticos, o no coinciden con identificadores est√°ndar que estamos usando. Un primer paso en limpieza de datos es renombrarlos a nuestro formato. nombres.columnas %&gt;% str_replace_all(&#39;_&#39;,&#39; &#39;) # Reemplaza los caracteres &quot;_&quot; por &quot; &quot; en la lista &quot;nombres.columnas&quot; (sin guardar el objeto). La funci√≥n str_replace(a,b) busca &quot;a&quot; dentro de la entrada y lo reemplaza por &quot;b&quot; ## [1] &quot;locus of control&quot; &quot;self concept&quot; &quot;motivation&quot; &quot;read&quot; ## [5] &quot;write&quot; &quot;math&quot; &quot;science&quot; &quot;sex&quot; nombres.columnas %&gt;% # Cambiamos el nombre de las columanas a espa√±ol str_replace_all(c(&quot;locus_of_control&quot; = &quot;control&quot;, &quot;self_concept&quot; = &quot;consciencia&quot;, &#39;motivation&#39;=&#39;motivaci√≥n&#39;, &#39;read&#39;=&#39;lectura&#39;, &#39;write&#39;=&#39;escritura&#39;, &#39;math&#39;=&#39;matem√°ticas&#39;, &#39;science&#39;=&#39;ciencias&#39;, &#39;sex&#39;=&#39;sexo&#39;) ) -&gt; nuevas.cols # Guardamos el nuevo objeto colnames(mi.set) &lt;- nuevas.cols # Renombra las columnas del dataset &quot;mi.set&quot; con los nombres en la lista &quot;nuveas.cols&quot; attr(mi.set, &quot;psychology&quot;) &lt;- nuevas.cols[c(1:3)] # Renombra atributos internos del dataset &quot;mi.set&quot; con los valores 1-3 en la lista &quot;nuevas.cols&quot; attr(mi.set, &quot;academic&quot;) &lt;- nuevas.cols[c(4:8)] # Renombra atributos internos del dataset &quot;mi.set&quot; con los valores 4-8 en la lista &quot;nuevas.cols&quot; attributes(mi.set) # Muestra los atributos del dataset &quot;mi.set&quot;. Ahora son distintos dado que los renombramos. ## $names ## [1] &quot;control&quot; &quot;consciencia&quot; &quot;motivaci√≥n&quot; &quot;lectura&quot; &quot;escritura&quot; ## [6] &quot;matem√°ticas&quot; &quot;ciencias&quot; &quot;sexo&quot; ## ## $row.names ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ## [19] 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ## [37] 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 ## [55] 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 ## [73] 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 ## [91] 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 ## [109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 ## [127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 ## [145] 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 ## [163] 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 ## [181] 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 ## [199] 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 ## [217] 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 ## [235] 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 ## [253] 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 ## [271] 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 ## [289] 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 ## [307] 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 ## [325] 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 ## [343] 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 ## [361] 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 ## [379] 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 ## [397] 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 ## [415] 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 ## [433] 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 ## [451] 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 ## [469] 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 ## [487] 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 ## [505] 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 ## [523] 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 ## [541] 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 ## [559] 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 ## [577] 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 ## [595] 595 596 597 598 599 600 ## ## $academic ## [1] &quot;lectura&quot; &quot;escritura&quot; &quot;matem√°ticas&quot; &quot;ciencias&quot; &quot;sexo&quot; ## ## $psychology ## [1] &quot;control&quot; &quot;consciencia&quot; &quot;motivaci√≥n&quot; ## ## $class ## [1] &quot;data.frame&quot; 1.5.2 Visualizaci√≥n de datos A√∫n dentro de las exploraciones iniciales, resulta conveniente visualizar los datos para encontrar patrones que luego podamos usar para an√°lisis. Para esto podemos usar funciones como plot(), ya incluida en R, o paquetes como ggPlot2, que permiten generar gr√°ficos m√°s complejos. mi.set$motivaci√≥n &lt;- as.factor(mi.set$motivaci√≥n) # Creamos un objeto &quot;dp&quot; como plot dp &lt;- ggplot(mi.set, aes(x=motivaci√≥n, y=matem√°ticas, # Plots en x e y (motivaci√≥n y matematicas) fill=motivaci√≥n))+ # Coloreando segun x (motivacion) geom_violin(trim=FALSE)+ # A√±ade un violin-plot geom_boxplot(width=0.1, fill=&quot;white&quot;)+ # Fill de las barras de Desviaci√≥n Estandar labs(title=&quot;Desempe√±o&quot;,x=&quot;Motivaci√≥n&quot;, y = &quot;Ciencias&quot;) # Etiquetas (titulo, x, y) # con ggplot2 es posible usar &quot;+&quot; para a√±adir elementos al plot dp + scale_fill_brewer(palette=&quot;jco&quot;) + theme_classic() -&gt; dp dp %&gt;% plot() # Podemos usar pipes para plots Una forma de explorar la interacci√≥n entre variables es haciendo una matriz que muestre la correlaci√≥n de estas. academic_variables &lt;- attr(mi.set, &quot;academic&quot;) # Agrupamos las variables academicas ggpairs(mi.set, academic_variables, title = &quot;Segun variables academicas&quot;) # Permite hacer una matriz de plots a partir de grupos de variables, calculando la correlaci√≥n entre estas Se pueden construir plots complejos a√±adiendo elementos en ggplot2. # Otro subset de datos mi.set2 = sets.de.datos$diamantes p1 &lt;- ggplot(subset(mi.set2, carat &gt;= 2.2), # Selecciona solo los diamantes de m√°s de 2.2 carat aes(x = table, y = price, colour = cut))+ # Define los ejes geom_point(alpha = 0.7) + # A√±adimos un punto para cada dato, con opacidad 70% geom_smooth(method = &quot;loess&quot;, alpha = 0.05, size = 1, span = 1)+ # Suavizamos las lineas theme_bw() # Utiliza bw, el tema clasico de ggplot2. M√°s en ggtheme() p2 &lt;- ggplot(subset(mi.set2, carat &gt; 2.2 &amp; depth &gt; 55 &amp; depth &lt; 70), # Podemos usar &quot;&amp;&quot; como AND para sumar requisitos, entonces serian solo los de m√°s de 2.2 carats, y profundidad entre 55-70 aes(x = depth, fill = cut))+ # Solo los destribuye segun el corte geom_histogram(colour = &quot;black&quot;, binwidth = 1, position = &quot;dodge&quot;)+ # Define el plot como histograma theme_bw() # Usa el tema clasico Podemos usar estos plots para crear nuevos graficos, ya sea a√±adiendo elementos, o sumandolos para hacer figuras. p1_lancet &lt;- p1 + scale_color_lancet() # A√±ade colores del Lancet Oncology al plot p1 p2_lancet &lt;- p2 + scale_fill_lancet() # A√±ade colores del Lancet Oncology al plot p2 figura &lt;- grid.arrange(p1_lancet, p2_lancet, ncol = 2) # Crea una figura a partir de los plots recoloreados 1.5.3 Visualizaciones interactivas Existen varios paquetes en R capaces de crear visualizaciones interactivas. Estas se pueden ampliar, reescalar, rotar, o m√°s, dependiendo del paquete usado. # Plot interactivo generado automaticamente usando analisis de `stats::prcomp` p &lt;- autoplotly(prcomp(iris[c(1, 2, 3, 4)]), data = iris, # HAce un analisis PCA de los datos Iris colour = &#39;Species&#39;, label = TRUE, label.size = 3, frame = TRUE) # Colores, segun especie # A√±adiendo elementos al plot PCA p + ggplot2::ggtitle(&quot;Analisis de componentes principales&quot;)+ # Titulo ggplot2::labs(x = &quot;Primer componente principal&quot;, # Coordenada 1 y = &quot;Segundo componente principal&quot;) -&gt; p # Coordenada 2, guarda p # A√±adiendo anotaciones, como una flecha p %&gt;% plotly::layout(annotations = list( text = &quot;Flecha apuntando&quot;, font = list( family = &quot;Courier New, monospace&quot;, size = 18, color = &quot;black&quot;), x = 0, y = 0, showarrow = TRUE)) (#fig:Reducci√≥n dimensional)Componentes principales de un dataset de Flores Esta figura es creada usando el paquete Plotly, tambien disponible en Python, JavaScript y Julia. Es una buena alternativa si quieren un lenguaje de graficos multiplataforma. "]]
